#Configuation for robot odometry EKF

# The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
# computation until it receives at least one message from one of the inputs. It will then run continuously at the
# frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
frequency: 50

# Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
publish_tf: true

# ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
# set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
# environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
# by, for example, an IMU. Defaults to false if unspecified.
two_d_mode: false

predict_to_current_time: true

odom0: ground_truth/odom
odom0_config: [true, true, true,
               true, true, true,
               true, true, true,
               true, true, true,
               false, false, false]

# # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
# # report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
# # arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
# # measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
# # always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
# # data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
# # integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
# # for twist measurements has no effect.
odom0_differential: false

odom_frame: odom
base_link_frame: base_link
world_frame: odom

# [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# However, if users find that a given variable is slow to converge, one approach is to increase the
# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# unspecified.
# process_noise_covariance: [0.05, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0.06, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]


# process_noise_covariance: [1., 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    1.0, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    1., 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    1., 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    1.0, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    1.0, 0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    1.05, 0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     1.05, 0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     1.08, 0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    1.02, 0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    1.02, 0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    1.04, 0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.02, 0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.02, 0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.03]


# process_noise_covariance: [0.125, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0.125, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0.15, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0.075, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0.075, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0.15, 0,     0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0.0625, 0,     0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0.0625, 0,    0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0.1, 0,    0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0.025, 0,    0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.025, 0,    0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.05, 0,    0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
#                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]